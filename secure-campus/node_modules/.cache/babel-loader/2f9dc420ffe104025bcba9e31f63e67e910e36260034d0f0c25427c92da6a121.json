{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Manager = void 0;\nconst eio = require(\"engine.io-client\");\nconst socket_1 = require(\"./socket\");\nconst Emitter = require(\"component-emitter\");\nconst parser = require(\"socket.io-parser\");\nconst on_1 = require(\"./on\");\nconst Backoff = require(\"backo2\");\nconst debug = require(\"debug\")(\"socket.io-client:manager\");\nclass Manager extends Emitter {\n  constructor(uri, opts) {\n    super();\n    this.nsps = {};\n    this.subs = [];\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    this.opts = opts;\n    this.reconnection(opts.reconnection !== false);\n    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n    this.reconnectionDelay(opts.reconnectionDelay || 1000);\n    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n    this.randomizationFactor(opts.randomizationFactor || 0.5);\n    this.backoff = new Backoff({\n      min: this.reconnectionDelay(),\n      max: this.reconnectionDelayMax(),\n      jitter: this.randomizationFactor()\n    });\n    this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n    this._readyState = \"closed\";\n    this.uri = uri;\n    const _parser = opts.parser || parser;\n    this.encoder = new _parser.Encoder();\n    this.decoder = new _parser.Decoder();\n    this._autoConnect = opts.autoConnect !== false;\n    if (this._autoConnect) this.open();\n  }\n  reconnection(v) {\n    if (!arguments.length) return this._reconnection;\n    this._reconnection = !!v;\n    return this;\n  }\n  reconnectionAttempts(v) {\n    if (v === undefined) return this._reconnectionAttempts;\n    this._reconnectionAttempts = v;\n    return this;\n  }\n  reconnectionDelay(v) {\n    var _a;\n    if (v === undefined) return this._reconnectionDelay;\n    this._reconnectionDelay = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n    return this;\n  }\n  randomizationFactor(v) {\n    var _a;\n    if (v === undefined) return this._randomizationFactor;\n    this._randomizationFactor = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n    return this;\n  }\n  reconnectionDelayMax(v) {\n    var _a;\n    if (v === undefined) return this._reconnectionDelayMax;\n    this._reconnectionDelayMax = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n    return this;\n  }\n  timeout(v) {\n    if (!arguments.length) return this._timeout;\n    this._timeout = v;\n    return this;\n  }\n  /**\r\n   * Starts trying to reconnect if reconnection is enabled and we have not\r\n   * started reconnecting yet\r\n   *\r\n   * @private\r\n   */\n  maybeReconnectOnOpen() {\n    // Only try to reconnect if it's the first time we're connecting\n    if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n      // keeps reconnection from firing twice for the same reconnection loop\n      this.reconnect();\n    }\n  }\n  /**\r\n   * Sets the current transport `socket`.\r\n   *\r\n   * @param {Function} fn - optional, callback\r\n   * @return self\r\n   * @public\r\n   */\n  open(fn) {\n    debug(\"readyState %s\", this._readyState);\n    if (~this._readyState.indexOf(\"open\")) return this;\n    debug(\"opening %s\", this.uri);\n    this.engine = eio(this.uri, this.opts);\n    const socket = this.engine;\n    const self = this;\n    this._readyState = \"opening\";\n    this.skipReconnect = false;\n    // emit `open`\n    const openSubDestroy = on_1.on(socket, \"open\", function () {\n      self.onopen();\n      fn && fn();\n    });\n    // emit `error`\n    const errorSub = on_1.on(socket, \"error\", err => {\n      debug(\"error\");\n      self.cleanup();\n      self._readyState = \"closed\";\n      super.emit(\"error\", err);\n      if (fn) {\n        fn(err);\n      } else {\n        // Only do this if there is no fn to handle the error\n        self.maybeReconnectOnOpen();\n      }\n    });\n    if (false !== this._timeout) {\n      const timeout = this._timeout;\n      debug(\"connect attempt will timeout after %d\", timeout);\n      if (timeout === 0) {\n        openSubDestroy(); // prevents a race condition with the 'open' event\n      }\n      // set timer\n      const timer = setTimeout(() => {\n        debug(\"connect attempt timed out after %d\", timeout);\n        openSubDestroy();\n        socket.close();\n        socket.emit(\"error\", new Error(\"timeout\"));\n      }, timeout);\n      this.subs.push(function subDestroy() {\n        clearTimeout(timer);\n      });\n    }\n    this.subs.push(openSubDestroy);\n    this.subs.push(errorSub);\n    return this;\n  }\n  /**\r\n   * Alias for open()\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n  connect(fn) {\n    return this.open(fn);\n  }\n  /**\r\n   * Called upon transport open.\r\n   *\r\n   * @private\r\n   */\n  onopen() {\n    debug(\"open\");\n    // clear old subs\n    this.cleanup();\n    // mark as open\n    this._readyState = \"open\";\n    super.emit(\"open\");\n    // add new subs\n    const socket = this.engine;\n    this.subs.push(on_1.on(socket, \"ping\", this.onping.bind(this)), on_1.on(socket, \"data\", this.ondata.bind(this)), on_1.on(socket, \"error\", this.onerror.bind(this)), on_1.on(socket, \"close\", this.onclose.bind(this)), on_1.on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n  }\n  /**\r\n   * Called upon a ping.\r\n   *\r\n   * @private\r\n   */\n  onping() {\n    super.emit(\"ping\");\n  }\n  /**\r\n   * Called with data.\r\n   *\r\n   * @private\r\n   */\n  ondata(data) {\n    this.decoder.add(data);\n  }\n  /**\r\n   * Called when parser fully decodes a packet.\r\n   *\r\n   * @private\r\n   */\n  ondecoded(packet) {\n    super.emit(\"packet\", packet);\n  }\n  /**\r\n   * Called upon socket error.\r\n   *\r\n   * @private\r\n   */\n  onerror(err) {\n    debug(\"error\", err);\n    super.emit(\"error\", err);\n  }\n  /**\r\n   * Creates a new socket for the given `nsp`.\r\n   *\r\n   * @return {Socket}\r\n   * @public\r\n   */\n  socket(nsp, opts) {\n    let socket = this.nsps[nsp];\n    if (!socket) {\n      socket = new socket_1.Socket(this, nsp, opts);\n      this.nsps[nsp] = socket;\n    }\n    return socket;\n  }\n  /**\r\n   * Called upon a socket close.\r\n   *\r\n   * @param socket\r\n   * @private\r\n   */\n  _destroy(socket) {\n    const nsps = Object.keys(this.nsps);\n    for (const nsp of nsps) {\n      const socket = this.nsps[nsp];\n      if (socket.active) {\n        debug(\"socket %s is still active, skipping close\", nsp);\n        return;\n      }\n    }\n    this._close();\n  }\n  /**\r\n   * Writes a packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n  _packet(packet) {\n    debug(\"writing packet %j\", packet);\n    const encodedPackets = this.encoder.encode(packet);\n    for (let i = 0; i < encodedPackets.length; i++) {\n      this.engine.write(encodedPackets[i], packet.options);\n    }\n  }\n  /**\r\n   * Clean up transport subscriptions and packet buffer.\r\n   *\r\n   * @private\r\n   */\n  cleanup() {\n    debug(\"cleanup\");\n    this.subs.forEach(subDestroy => subDestroy());\n    this.subs.length = 0;\n    this.decoder.destroy();\n  }\n  /**\r\n   * Close the current socket.\r\n   *\r\n   * @private\r\n   */\n  _close() {\n    debug(\"disconnect\");\n    this.skipReconnect = true;\n    this._reconnecting = false;\n    if (\"opening\" === this._readyState) {\n      // `onclose` will not fire because\n      // an open event never happened\n      this.cleanup();\n    }\n    this.backoff.reset();\n    this._readyState = \"closed\";\n    if (this.engine) this.engine.close();\n  }\n  /**\r\n   * Alias for close()\r\n   *\r\n   * @private\r\n   */\n  disconnect() {\n    return this._close();\n  }\n  /**\r\n   * Called upon engine close.\r\n   *\r\n   * @private\r\n   */\n  onclose(reason) {\n    debug(\"onclose\");\n    this.cleanup();\n    this.backoff.reset();\n    this._readyState = \"closed\";\n    super.emit(\"close\", reason);\n    if (this._reconnection && !this.skipReconnect) {\n      this.reconnect();\n    }\n  }\n  /**\r\n   * Attempt a reconnection.\r\n   *\r\n   * @private\r\n   */\n  reconnect() {\n    if (this._reconnecting || this.skipReconnect) return this;\n    const self = this;\n    if (this.backoff.attempts >= this._reconnectionAttempts) {\n      debug(\"reconnect failed\");\n      this.backoff.reset();\n      super.emit(\"reconnect_failed\");\n      this._reconnecting = false;\n    } else {\n      const delay = this.backoff.duration();\n      debug(\"will wait %dms before reconnect attempt\", delay);\n      this._reconnecting = true;\n      const timer = setTimeout(() => {\n        if (self.skipReconnect) return;\n        debug(\"attempting reconnect\");\n        super.emit(\"reconnect_attempt\", self.backoff.attempts);\n        // check again for the case socket closed in above events\n        if (self.skipReconnect) return;\n        self.open(err => {\n          if (err) {\n            debug(\"reconnect attempt error\");\n            self._reconnecting = false;\n            self.reconnect();\n            super.emit(\"reconnect_error\", err);\n          } else {\n            debug(\"reconnect success\");\n            self.onreconnect();\n          }\n        });\n      }, delay);\n      this.subs.push(function subDestroy() {\n        clearTimeout(timer);\n      });\n    }\n  }\n  /**\r\n   * Called upon successful reconnect.\r\n   *\r\n   * @private\r\n   */\n  onreconnect() {\n    const attempt = this.backoff.attempts;\n    this._reconnecting = false;\n    this.backoff.reset();\n    super.emit(\"reconnect\", attempt);\n  }\n}\nexports.Manager = Manager;","map":{"version":3,"names":["Object","defineProperty","exports","value","Manager","eio","require","socket_1","Emitter","parser","on_1","Backoff","debug","constructor","uri","opts","nsps","subs","undefined","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","_readyState","_parser","encoder","Encoder","decoder","Decoder","_autoConnect","autoConnect","open","v","arguments","length","_reconnection","_reconnectionAttempts","_a","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","maybeReconnectOnOpen","_reconnecting","attempts","reconnect","fn","indexOf","engine","socket","self","skipReconnect","openSubDestroy","on","onopen","errorSub","err","cleanup","emit","timer","setTimeout","close","Error","push","subDestroy","clearTimeout","connect","onping","bind","ondata","onerror","onclose","ondecoded","data","add","packet","nsp","Socket","_destroy","keys","active","_close","_packet","encodedPackets","encode","i","write","options","forEach","destroy","reset","disconnect","reason","delay","duration","onreconnect","attempt"],"sources":["C:/mashroo3/SecureCampus/secure-campus/node_modules/socket.io-client/build/manager.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Manager = void 0;\r\nconst eio = require(\"engine.io-client\");\r\nconst socket_1 = require(\"./socket\");\r\nconst Emitter = require(\"component-emitter\");\r\nconst parser = require(\"socket.io-parser\");\r\nconst on_1 = require(\"./on\");\r\nconst Backoff = require(\"backo2\");\r\nconst debug = require(\"debug\")(\"socket.io-client:manager\");\r\nclass Manager extends Emitter {\r\n    constructor(uri, opts) {\r\n        super();\r\n        this.nsps = {};\r\n        this.subs = [];\r\n        if (uri && \"object\" === typeof uri) {\r\n            opts = uri;\r\n            uri = undefined;\r\n        }\r\n        opts = opts || {};\r\n        opts.path = opts.path || \"/socket.io\";\r\n        this.opts = opts;\r\n        this.reconnection(opts.reconnection !== false);\r\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\r\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\r\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\r\n        this.randomizationFactor(opts.randomizationFactor || 0.5);\r\n        this.backoff = new Backoff({\r\n            min: this.reconnectionDelay(),\r\n            max: this.reconnectionDelayMax(),\r\n            jitter: this.randomizationFactor(),\r\n        });\r\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\r\n        this._readyState = \"closed\";\r\n        this.uri = uri;\r\n        const _parser = opts.parser || parser;\r\n        this.encoder = new _parser.Encoder();\r\n        this.decoder = new _parser.Decoder();\r\n        this._autoConnect = opts.autoConnect !== false;\r\n        if (this._autoConnect)\r\n            this.open();\r\n    }\r\n    reconnection(v) {\r\n        if (!arguments.length)\r\n            return this._reconnection;\r\n        this._reconnection = !!v;\r\n        return this;\r\n    }\r\n    reconnectionAttempts(v) {\r\n        if (v === undefined)\r\n            return this._reconnectionAttempts;\r\n        this._reconnectionAttempts = v;\r\n        return this;\r\n    }\r\n    reconnectionDelay(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._reconnectionDelay;\r\n        this._reconnectionDelay = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\r\n        return this;\r\n    }\r\n    randomizationFactor(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._randomizationFactor;\r\n        this._randomizationFactor = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\r\n        return this;\r\n    }\r\n    reconnectionDelayMax(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._reconnectionDelayMax;\r\n        this._reconnectionDelayMax = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\r\n        return this;\r\n    }\r\n    timeout(v) {\r\n        if (!arguments.length)\r\n            return this._timeout;\r\n        this._timeout = v;\r\n        return this;\r\n    }\r\n    /**\r\n     * Starts trying to reconnect if reconnection is enabled and we have not\r\n     * started reconnecting yet\r\n     *\r\n     * @private\r\n     */\r\n    maybeReconnectOnOpen() {\r\n        // Only try to reconnect if it's the first time we're connecting\r\n        if (!this._reconnecting &&\r\n            this._reconnection &&\r\n            this.backoff.attempts === 0) {\r\n            // keeps reconnection from firing twice for the same reconnection loop\r\n            this.reconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Sets the current transport `socket`.\r\n     *\r\n     * @param {Function} fn - optional, callback\r\n     * @return self\r\n     * @public\r\n     */\r\n    open(fn) {\r\n        debug(\"readyState %s\", this._readyState);\r\n        if (~this._readyState.indexOf(\"open\"))\r\n            return this;\r\n        debug(\"opening %s\", this.uri);\r\n        this.engine = eio(this.uri, this.opts);\r\n        const socket = this.engine;\r\n        const self = this;\r\n        this._readyState = \"opening\";\r\n        this.skipReconnect = false;\r\n        // emit `open`\r\n        const openSubDestroy = on_1.on(socket, \"open\", function () {\r\n            self.onopen();\r\n            fn && fn();\r\n        });\r\n        // emit `error`\r\n        const errorSub = on_1.on(socket, \"error\", (err) => {\r\n            debug(\"error\");\r\n            self.cleanup();\r\n            self._readyState = \"closed\";\r\n            super.emit(\"error\", err);\r\n            if (fn) {\r\n                fn(err);\r\n            }\r\n            else {\r\n                // Only do this if there is no fn to handle the error\r\n                self.maybeReconnectOnOpen();\r\n            }\r\n        });\r\n        if (false !== this._timeout) {\r\n            const timeout = this._timeout;\r\n            debug(\"connect attempt will timeout after %d\", timeout);\r\n            if (timeout === 0) {\r\n                openSubDestroy(); // prevents a race condition with the 'open' event\r\n            }\r\n            // set timer\r\n            const timer = setTimeout(() => {\r\n                debug(\"connect attempt timed out after %d\", timeout);\r\n                openSubDestroy();\r\n                socket.close();\r\n                socket.emit(\"error\", new Error(\"timeout\"));\r\n            }, timeout);\r\n            this.subs.push(function subDestroy() {\r\n                clearTimeout(timer);\r\n            });\r\n        }\r\n        this.subs.push(openSubDestroy);\r\n        this.subs.push(errorSub);\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for open()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    connect(fn) {\r\n        return this.open(fn);\r\n    }\r\n    /**\r\n     * Called upon transport open.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        debug(\"open\");\r\n        // clear old subs\r\n        this.cleanup();\r\n        // mark as open\r\n        this._readyState = \"open\";\r\n        super.emit(\"open\");\r\n        // add new subs\r\n        const socket = this.engine;\r\n        this.subs.push(on_1.on(socket, \"ping\", this.onping.bind(this)), on_1.on(socket, \"data\", this.ondata.bind(this)), on_1.on(socket, \"error\", this.onerror.bind(this)), on_1.on(socket, \"close\", this.onclose.bind(this)), on_1.on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\r\n    }\r\n    /**\r\n     * Called upon a ping.\r\n     *\r\n     * @private\r\n     */\r\n    onping() {\r\n        super.emit(\"ping\");\r\n    }\r\n    /**\r\n     * Called with data.\r\n     *\r\n     * @private\r\n     */\r\n    ondata(data) {\r\n        this.decoder.add(data);\r\n    }\r\n    /**\r\n     * Called when parser fully decodes a packet.\r\n     *\r\n     * @private\r\n     */\r\n    ondecoded(packet) {\r\n        super.emit(\"packet\", packet);\r\n    }\r\n    /**\r\n     * Called upon socket error.\r\n     *\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        debug(\"error\", err);\r\n        super.emit(\"error\", err);\r\n    }\r\n    /**\r\n     * Creates a new socket for the given `nsp`.\r\n     *\r\n     * @return {Socket}\r\n     * @public\r\n     */\r\n    socket(nsp, opts) {\r\n        let socket = this.nsps[nsp];\r\n        if (!socket) {\r\n            socket = new socket_1.Socket(this, nsp, opts);\r\n            this.nsps[nsp] = socket;\r\n        }\r\n        return socket;\r\n    }\r\n    /**\r\n     * Called upon a socket close.\r\n     *\r\n     * @param socket\r\n     * @private\r\n     */\r\n    _destroy(socket) {\r\n        const nsps = Object.keys(this.nsps);\r\n        for (const nsp of nsps) {\r\n            const socket = this.nsps[nsp];\r\n            if (socket.active) {\r\n                debug(\"socket %s is still active, skipping close\", nsp);\r\n                return;\r\n            }\r\n        }\r\n        this._close();\r\n    }\r\n    /**\r\n     * Writes a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    _packet(packet) {\r\n        debug(\"writing packet %j\", packet);\r\n        const encodedPackets = this.encoder.encode(packet);\r\n        for (let i = 0; i < encodedPackets.length; i++) {\r\n            this.engine.write(encodedPackets[i], packet.options);\r\n        }\r\n    }\r\n    /**\r\n     * Clean up transport subscriptions and packet buffer.\r\n     *\r\n     * @private\r\n     */\r\n    cleanup() {\r\n        debug(\"cleanup\");\r\n        this.subs.forEach((subDestroy) => subDestroy());\r\n        this.subs.length = 0;\r\n        this.decoder.destroy();\r\n    }\r\n    /**\r\n     * Close the current socket.\r\n     *\r\n     * @private\r\n     */\r\n    _close() {\r\n        debug(\"disconnect\");\r\n        this.skipReconnect = true;\r\n        this._reconnecting = false;\r\n        if (\"opening\" === this._readyState) {\r\n            // `onclose` will not fire because\r\n            // an open event never happened\r\n            this.cleanup();\r\n        }\r\n        this.backoff.reset();\r\n        this._readyState = \"closed\";\r\n        if (this.engine)\r\n            this.engine.close();\r\n    }\r\n    /**\r\n     * Alias for close()\r\n     *\r\n     * @private\r\n     */\r\n    disconnect() {\r\n        return this._close();\r\n    }\r\n    /**\r\n     * Called upon engine close.\r\n     *\r\n     * @private\r\n     */\r\n    onclose(reason) {\r\n        debug(\"onclose\");\r\n        this.cleanup();\r\n        this.backoff.reset();\r\n        this._readyState = \"closed\";\r\n        super.emit(\"close\", reason);\r\n        if (this._reconnection && !this.skipReconnect) {\r\n            this.reconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Attempt a reconnection.\r\n     *\r\n     * @private\r\n     */\r\n    reconnect() {\r\n        if (this._reconnecting || this.skipReconnect)\r\n            return this;\r\n        const self = this;\r\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\r\n            debug(\"reconnect failed\");\r\n            this.backoff.reset();\r\n            super.emit(\"reconnect_failed\");\r\n            this._reconnecting = false;\r\n        }\r\n        else {\r\n            const delay = this.backoff.duration();\r\n            debug(\"will wait %dms before reconnect attempt\", delay);\r\n            this._reconnecting = true;\r\n            const timer = setTimeout(() => {\r\n                if (self.skipReconnect)\r\n                    return;\r\n                debug(\"attempting reconnect\");\r\n                super.emit(\"reconnect_attempt\", self.backoff.attempts);\r\n                // check again for the case socket closed in above events\r\n                if (self.skipReconnect)\r\n                    return;\r\n                self.open((err) => {\r\n                    if (err) {\r\n                        debug(\"reconnect attempt error\");\r\n                        self._reconnecting = false;\r\n                        self.reconnect();\r\n                        super.emit(\"reconnect_error\", err);\r\n                    }\r\n                    else {\r\n                        debug(\"reconnect success\");\r\n                        self.onreconnect();\r\n                    }\r\n                });\r\n            }, delay);\r\n            this.subs.push(function subDestroy() {\r\n                clearTimeout(timer);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon successful reconnect.\r\n     *\r\n     * @private\r\n     */\r\n    onreconnect() {\r\n        const attempt = this.backoff.attempts;\r\n        this._reconnecting = false;\r\n        this.backoff.reset();\r\n        super.emit(\"reconnect\", attempt);\r\n    }\r\n}\r\nexports.Manager = Manager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}